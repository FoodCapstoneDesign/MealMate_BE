name: Prod build & deploy
on:
  workflow_dispatch:
    inputs:
      user_name:
        description: 배포유저
        required: true
        type: string
      stage_choice:
        description: 서버 환경
        type: choice
        options:
          - ''
          - prod
      release_message:
        description: 릴리즈 메시지
        type: string
  workflow_call:
    inputs:
      user_name:
        description: :배포유저
        type: string
        required: true
      stage_choice:
        description: :서버 환경
        type: string
        required: true
      branch:
        description: 브랜치
        type: string
      release_message:
        description: 릴리즈 메시지
        type: string

run-name: 'build on stage: ${{ inputs.stage_choice }} & branch: ${{ inputs.branch || github.ref_name }}'

jobs:
  env:
    name: setup environment variables
    runs-on: ubuntu-latest
    steps:
      - name: Get variables
        id: var
        run:
          echo "get env"
    outputs:
      branch: ${{ inputs.branch || github.ref_name }}


  build:
    needs: env
    runs-on: ubuntu-latest

    outputs:
      id: build_output
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - uses: actions/checkout@v2

      - name: JIB Build and Push
        run: |
          chmod +x gradlew
          ./gradlew clean jib --stacktrace
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}


      - name: Deploy
        uses: appleboy/ssh-action@v0.1.8
        with:
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          port: ${{ secrets.AWS_PORT }}
          script: |
            sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_TOKEN }}
            cd Mealmate-remote
            sudo git pull origin ${{ needs.env.outputs.branch }}
            sudo chmod +x ./deploy.sh
            sudo ./deploy.sh
            sudo docker image prune -f
